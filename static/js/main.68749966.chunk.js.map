{"version":3,"sources":["CanvasContainer.js","ThreeTest1.js","ThreeTest2.js","ThreeTest3.js","TestShader.js","App.js","index.js"],"names":["Container","styled","div","Text","CanvasContainer","text","children","xtra","position","Mesh","ref","useRef","useState","hovered","setHover","useFrame","current","rotation","x","y","scale","onPointerOver","onPointerOut","attach","args","color","ThreeTest1","N","m","n","nverts","values","Array","xgrid","ygrid","j","k","i","Math","sin","PI","pow","getData","extent","xmin","xmax","xmid","xrange","ymin","ymax","ymid","yrange","zmin","zmax","zmid","zrange","scalefac","max","scalefacz","getColor","scaleLinear","domain","interpolate","interpolateMagma","useMemo","vertices","colors","push","col","r","g","b","Float32Array","faces","res","M","n0","n1","n2","n3","Uint16Array","rotation-x","onUpdate","self","console","log","computeFaceNormals","computeVertexNormals","attachObject","count","length","array","itemSize","side","DoubleSide","vertexColors","ThreeTest2","shaderData","vertexShader","fragmentShader","ThreeTest3","input","attrs","props","type","boxRef","uniforms","delta","value","displacement","setDisplacement","getDisplacement","useCallback","box","attributes","colorSpeed","useControl","distortionLvl","random","needsUpdate","TestShader","BASE_URL","NLink","NavLink","exact","NavBar","App","to","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ilBAKA,IAAMA,EAAYC,IAAOC,IAAV,KAQTC,EAAOF,IAAOC,IAAV,KAOGE,EAAkB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAChD,OACE,kBAACP,EAAD,KACE,kBAAC,IAAD,KACE,uCACA,gCAAYQ,SAAU,CAAC,GAAI,GAAI,MAC9BF,EACD,kBAAC,IAAD,OAEAC,GAAQA,EACRF,GAAQ,kBAACF,EAAD,KAAOE,KCzBjBI,EAAO,WACX,IAAMC,EAAMC,mBADK,EAEWC,oBAAS,GAFpB,mBAEVC,EAFU,KAEDC,EAFC,KAMjB,OAFAC,aAAS,kBAAOL,EAAIM,QAAQC,SAASC,EAAIR,EAAIM,QAAQC,SAASE,GAAK,OAGjE,0BACET,IAAKA,EACLU,MAAOP,EAAU,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,GAC1CQ,cAAe,kBAAMP,GAAS,IAC9BQ,aAAc,kBAAMR,GAAS,KAE7B,uCAAmBS,OAAO,WAAWC,KAAM,CAAC,EAAG,EAAG,KAClD,0CACED,OAAO,WACPE,MAAOZ,EAAU,UAAY,WAE/B,kBAAC,IAAD,QAKOa,EAAa,WACxB,OACE,kBAAC,EAAD,CAAiBrB,KAAK,yCACpB,kBAAC,EAAD,Q,eCvBJsB,EAAI,I,EAEU,SAACC,EAAGC,GAKlB,IAJA,IAAIC,EAASD,EAAID,EACbG,EAAS,IAAIC,MAAMH,EAAID,GACvBK,EAAQ,IAAID,MAAMH,EAAID,GACtBM,EAAQ,IAAIF,MAAMH,EAAID,GACjBO,EAAI,EAAGC,EAAI,EAAGD,EAAIP,IAAKO,EAC9B,IAAK,IAAIE,EAAI,EAAGA,EAAIR,IAAKQ,IAAKD,EAC5BH,EAAMG,GAAKC,EACXH,EAAME,GAAK,GAAKE,KAAKC,IAAKF,EAAIC,KAAKE,GAAM,IAAML,EAC/CJ,EAAOK,GAAKE,KAAKG,IAAIR,EAAMG,GAAK,GAAI,GAAKE,KAAKG,IAAIP,EAAME,GAAK,GAAI,GAGrE,MAAO,CAAEH,QAAOC,QAAOH,SAAQD,UAGQY,CAlB/B,IAkB0Cf,GAA5CM,E,EAAAA,MAAOC,E,EAAAA,MAAOH,E,EAAAA,OAAQD,E,EAAAA,O,EAGTa,YAAOV,G,mBAArBW,E,KAAMC,E,KACPC,EAAO,IAAOF,EAAOC,GACrBE,EAASF,EAAOD,E,EAEDD,YAAOT,G,mBAArBc,E,KAAMC,E,KACPC,EAAO,IAAOF,EAAOC,GACrBE,EAASF,EAAOD,E,EAEDL,YAAOZ,G,mBAArBqB,E,KAAMC,E,KACPC,EAAO,IAAOF,EAAOC,GACrBE,EAASF,EAAOD,EAEhBI,EAAW,IAAMlB,KAAKmB,IAAIV,EAAQI,GAClCO,EAAY,GAAMH,EAGlBI,EAAWC,cACdC,OAAOlB,YAAOZ,IACd+B,aAAY,kBAAMC,OAEftD,EAAO,WAAO,IAAD,EACUuD,mBAAQ,WAGjC,IAFA,IAAMC,EAAW,GACXC,EAAS,GACN7B,EAAI,EAAGA,EAAIP,EAAQO,IAAK,CAC/B4B,EAASE,MAAMlC,EAAMI,GAAKS,GAAQU,GAClCS,EAASE,MAAMjC,EAAMG,GAAKa,GAAQM,GAClCS,EAASE,MAAMpC,EAAOM,GAAKiB,GAAQI,GACnC,IAAMU,EAAM3C,YAAMkC,EAAS5B,EAAOM,KAClC6B,EAAOC,KAAKC,EAAIC,EAAE,IAAKD,EAAIE,EAAE,IAAKF,EAAIG,EAAE,KAE1C,MAAO,CAAC,IAAIC,aAAaP,GAAW,IAAIO,aAAaN,MACpD,IAZc,mBACVD,EADU,KACAC,EADA,KAcXO,EAAQT,mBAAQ,WAEpB,IADA,IAAMU,EAAM,GACHvC,EAAI,EAAGA,EAAIwC,IAAOxC,IACzB,IAAK,IAAIE,EAAI,EAAGA,EAAIV,IAAOU,IAAK,CAC9B,IAAMuC,EAAKzC,EAAIR,EAAIU,EACbwC,EAAKD,EAAK,EACVE,GAAM3C,EAAI,GAAKR,EAAIU,EAAI,EACvB0C,EAAKD,EAAK,EAChBJ,EAAIP,KAAKS,EAAIC,EAAIC,GACjBJ,EAAIP,KAAKW,EAAIC,EAAIH,GAGrB,OAAO,IAAII,YAAYN,KACtB,IAEH,OACE,0BACEO,cAAa3C,KAAKE,GAAG,EAEvBpB,MAAO,CAAC,EAAE,EAAE,IAIV,oCACEG,OAAO,WACP2D,SAAU,SAACC,GACTC,QAAQC,IAAIF,GACZA,EAAKG,qBACLH,EAAKI,yBAGP,qCACEC,aAAc,CAAC,aAAc,YAC7BC,MAAOxB,EAASyB,OAAS,EACzBC,MAAO1B,EACP2B,SAAU,IAEZ,qCACEJ,aAAc,CAAC,aAAc,SAC7BC,MAAOvB,EAAOwB,OAAS,EACvBC,MAAOzB,EACP0B,SAAU,IAEZ,qCACErE,OAAO,QACPkE,MAAOhB,EAAMiB,OACbC,MAAOlB,EACPmB,SAAU,KAGd,uCAAmBrE,OAAO,WAAWsE,KAAMC,aAAYC,cAAc,IACrE,kBAAC,IAAD,QAMOC,EAAa,WACxB,OACE,kBAAC,EAAD,CAAiB3F,KAAK,yDACpB,kBAAC,EAAD,Q,EChHU,SAACuB,EAAGC,GAKlB,IAJA,IAAIC,EAASD,EAAID,EACbG,EAAS,IAAIC,MAAMH,EAAID,GACvBK,EAAQ,IAAID,MAAMH,EAAID,GACtBM,EAAQ,IAAIF,MAAMH,EAAID,GACjBO,EAAI,EAAGC,EAAI,EAAGD,EAAIP,IAAKO,EAC9B,IAAK,IAAIE,EAAI,EAAGA,EAAIR,IAAKQ,IAAKD,EAC5BH,EAAMG,GAAKC,EACXH,EAAME,GAAK,GAAKE,KAAKC,IAAKF,EAAIC,KAAKE,GAAM,IAAML,EAC/CJ,EAAOK,GAAKE,KAAKG,IAAIR,EAAMG,GAAK,GAAI,GAAKE,KAAKG,IAAIP,EAAME,GAAK,GAAI,GAGrE,MAAO,CAAEH,QAAOC,QAAOH,SAAQD,UAGQY,CAlB/B,IACJ,KAiBET,E,EAAAA,MAAOC,G,EAAAA,MAAOH,G,EAAAA,OAAQD,G,EAAAA,O,GAGTa,YAAOV,G,qBAArBW,G,MAAMC,G,MACPC,GAAO,IAAOF,GAAOC,IACrBE,GAASF,GAAOD,G,GAEDD,YAAOT,I,qBAArBc,G,MAAMC,G,MACPC,GAAO,IAAOF,GAAOC,IACrBE,GAASF,GAAOD,G,GAEDL,YAAOZ,I,qBAArBqB,G,MAAMC,G,MACPC,GAAO,IAAOF,GAAOC,IACrBE,GAASF,GAAOD,GAEhBI,GAAW,IAAMlB,KAAKmB,IAAIV,GAAQI,IAClCO,GAAY,GAAMH,GAGlBI,GAAWC,cACdC,OAAOlB,YAAOZ,KACd+B,aAAY,kBAAMC,OAEftD,GAAO,WAAO,IAAD,EACUuD,mBAAQ,WAGjC,IAFA,IAAMC,EAAW,GACXC,EAAS,GACN7B,EAAI,EAAGA,EAAIP,GAAQO,IAAK,CAC/B4B,EAASE,MAAMlC,EAAMI,GAAKS,IAAQU,IAClCS,EAASE,MAAMjC,GAAMG,GAAKa,IAAQM,IAClCS,EAASE,MAAMpC,GAAOM,GAAKiB,IAAQI,IACnC,IAAMU,EAAM3C,YAAMkC,GAAS5B,GAAOM,KAClC6B,EAAOC,KAAKC,EAAIC,EAAI,IAAKD,EAAIE,EAAI,IAAKF,EAAIG,EAAI,KAEhD,MAAO,CAAC,IAAIC,aAAaP,GAAW,IAAIO,aAAaN,MACpD,IAZc,mBACVD,EADU,KACAC,EADA,KAcXO,EAAQT,mBAAQ,WAEpB,IADA,IAAMU,EAAM,GACHvC,EAAI,EAAGA,EAAIwC,IAAOxC,IACzB,IAAK,IAAIE,EAAI,EAAGA,EAAIV,IAAOU,IAAK,CAC9B,IAAMuC,EA1DR,IA0DazC,EAAQE,EACbwC,EAAKD,EAAK,EACVE,EA5DR,KA4Dc3C,EAAI,GAASE,EAAI,EACvB0C,EAAKD,EAAK,EAChBJ,EAAIP,KAAKS,EAAIC,EAAIC,GACjBJ,EAAIP,KAAKW,EAAIC,EAAIH,GAGrB,OAAO,IAAII,YAAYN,KACtB,IAEGuB,EAAajC,mBAAQ,WAmBzB,MAAO,CAAEkC,aAlBS,8KAkBKC,eARH,oHASnB,IAEH,OACE,0BACElB,cAAa3C,KAAKE,GAAK,EAEvBpB,MAAO,CAAC,EAAG,EAAG,IAKd,oCACEG,OAAO,WACP2D,SAAU,SAACC,GACTC,QAAQC,IAAIF,GACZA,EAAKG,qBACLH,EAAKI,yBAGP,qCACEC,aAAc,CAAC,aAAc,YAC7BC,MAAOxB,EAASyB,OAAS,EACzBC,MAAO1B,EACP2B,SAAU,IAEZ,qCACEJ,aAAc,CAAC,aAAc,SAC7BC,MAAOvB,EAAOwB,OAAS,EACvBC,MAAOzB,EACP0B,SAAU,IAEZ,qCACErE,OAAO,QACPkE,MAAOhB,EAAMiB,OACbC,MAAOlB,EACPmB,SAAU,KAGd,kDAAgBrE,OAAO,YAAe0E,EAAtC,CAAkDJ,KAAMC,gBAOxD,kBAAC,IAAD,QAMOM,GAAa,WACxB,OACE,kBAAC,EAAD,CAAiB/F,KAAK,+EACpB,kBAAC,GAAD,Q,gFChJSJ,IAAOoG,MAAMC,OAAM,SAACC,GAAD,MAAY,CAC5CC,KAAM,WADOvG,CAAH,MAAZ,IAIMQ,GAAO,WACX,IAAMC,EAAMC,mBACN8F,EAAS9F,mBAETsF,EAAajC,mBAAQ,WA4BzB,MAAO,CAAEkC,aA3BS,wTA2BKC,eAbH,oJAamBO,SAJtB,CACfC,MAAO,CAAEC,MAAO,OAIjB,IAjCc,EAmCuBhG,qBAnCvB,mBAmCViG,EAnCU,KAmCIC,EAnCJ,KAqCXC,EAAkBC,uBACtB,SAACC,GACC,IAAIJ,EAAJ,CACA,IAAMhF,EAAIoF,EAAIC,WAAW1G,SAASiF,MAC5Bf,EAAM,IAAIF,aAAa3C,GAC7BiF,EAAgBpC,MAElB,CAACmC,IAKGM,EAAaC,aAAW,cAAe,CAACZ,KAAM,SAAUI,MAAO,GAAKnD,IAAK,KACzE4D,EAAgBD,aAAW,iBAAkB,CAACZ,KAAM,SAAUI,MAAO,EAAKnD,IAAK,IAWrF,OATA1C,aAAS,WACPL,EAAIM,QAAQC,SAASC,EAAIR,EAAIM,QAAQC,SAASE,GAAK,IACnD8E,EAAWS,SAASC,MAAMC,OAASO,EACnC,IAAK,IAAI9E,EAAI,EAAGA,EAAIwE,EAAanB,OAAQrD,IACvCwE,EAAaxE,GAAKC,KAAKgF,SAAWD,EAEpCZ,EAAOzF,QAAQkG,WAAWL,aAAaU,aAAc,KAIrD,0BAAM7G,IAAKA,GACT,uCACEA,IAAK+F,EACLlF,OAAO,WACPC,KAAM,CAAC,EAAG,EAAG,GACb0D,SAAU,SAACC,GAAD,OAAU4B,EAAgB5B,KAEnC0B,GACC,qCACErB,aAAc,CAAC,aAAc,gBAC7BC,MAAOoB,EAAanB,OACpBC,MAAOkB,EACPjB,SAAU,KAIhB,kDAAgBrE,OAAO,YAAe0E,IACtC,kBAAC,IAAD,QAYOuB,GAAa,WACxB,OACE,kBAAC,EAAD,CAAiBnH,KAAK,8BAA8BE,KAAM,kBAAC,KAAD,OACxD,kBAAC,GAAD,Q,wkBC3FN,IAAMkH,GAAW,qBAEXC,GAAQzH,YAAO0H,KAASrB,OAAM,SAACC,GAAD,MAAY,CAC9CqB,OAAO,KADK3H,CAAH,MAUL4H,GAAS5H,IAAOC,IAAV,MAYNC,GAAOF,IAAOC,IAAV,MAgDK4H,GAzCH,WACV,OACE,kBAAC,IAAD,KACE,kBAACD,GAAD,KACE,6BACE,kBAACH,GAAD,CAAOK,GAAE,WAAMN,GAAN,MAAT,SAEF,6BACE,kBAACC,GAAD,CAAOK,GAAE,WAAMN,GAAN,gBAAT,eAEF,6BACE,kBAACC,GAAD,CAAOK,GAAE,WAAMN,GAAN,gBAAT,eAEF,6BACE,kBAACC,GAAD,CAAOK,GAAE,WAAMN,GAAN,gBAAT,eAEF,6BACE,kBAACC,GAAD,CAAOK,GAAE,WAAMN,GAAN,gBAAT,gBAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACI,KAAI,WAAMP,GAAN,MACf,kBAAC,GAAD,4BAEF,kBAAC,IAAD,CAAOO,KAAI,WAAMP,GAAN,gBACT,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOO,KAAI,WAAMP,GAAN,gBACT,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOO,KAAI,WAAMP,GAAN,gBACT,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOO,KAAI,WAAMP,GAAN,gBACT,kBAAC,GAAD,UC3EVQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.68749966.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Canvas } from \"react-three-fiber\";\nimport { Stats } from \"drei\";\n\nconst Container = styled.div`\n  height: 90vh;\n  width: 100vw;\n  & canvas:focus {\n    outline-width: 0px;\n  }\n`;\n\nconst Text = styled.div`\n  color: #fff;\n  font-size: 1.2em;\n  text-align: center;\n  padding-top: 0.5em;\n`;\n\nexport const CanvasContainer = ({ text, children, xtra }) => {\n  return (\n    <Container>\n      <Canvas>\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        {children}\n        <Stats />\n      </Canvas>\n      { xtra && xtra}\n      { text && <Text>{text}</Text>}\n    </Container>\n  );\n};\n","import React, { useRef, useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { OrbitControls } from \"drei\";\nimport { CanvasContainer } from \"./CanvasContainer\";\n\nconst Mesh = () => {\n  const ref = useRef();\n  const [hovered, setHover] = useState(false);\n\n  useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01));\n\n  return (\n    <mesh\n      ref={ref}\n      scale={hovered ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onPointerOver={() => setHover(true)}\n      onPointerOut={() => setHover(false)}\n    >\n      <boxBufferGeometry attach=\"geometry\" args={[2, 2, 2]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        color={hovered ? \"hotpink\" : \"orange\"}\n      />\n      <OrbitControls />\n    </mesh>\n  );\n};\n\nexport const ThreeTest1 = () => {\n  return (\n    <CanvasContainer text=\"Simple box geometry with hover event.\">\n      <Mesh />\n    </CanvasContainer>\n  );\n};\n","import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport { OrbitControls, Sky } from \"drei\";\nimport { color, extent, scaleLinear, interpolateMagma } from \"d3\";\nimport { CanvasContainer } from \"./CanvasContainer\";\n\nconst M = 101,\n  N = 101;\n\nconst getData = (m, n) => {\n  var nverts = n * m;\n  var values = new Array(n * m);\n  var xgrid = new Array(n * m);\n  var ygrid = new Array(n * m);\n  for (var j = 0, k = 0; j < m; ++j) {\n    for (var i = 0; i < n; ++i, ++k) {\n      xgrid[k] = i;\n      ygrid[k] = 25 * Math.sin((i * Math.PI) / 50) + j;\n      values[k] = Math.pow(xgrid[k] - 50, 2) + Math.pow(ygrid[k] - 50, 2);\n    }\n  }\n  return { xgrid, ygrid, values, nverts };\n};\n\nconst { xgrid, ygrid, values, nverts } = getData(M, N);\n\n// Obtain centre of grid and scale factors\nconst [xmin, xmax] = extent(xgrid);\nconst xmid = 0.5 * (xmin + xmax);\nconst xrange = xmax - xmin;\n\nconst [ymin, ymax] = extent(ygrid);\nconst ymid = 0.5 * (ymin + ymax);\nconst yrange = ymax - ymin;\n\nconst [zmin, zmax] = extent(values);\nconst zmid = 0.5 * (zmin + zmax);\nconst zrange = zmax - zmin;\n\nconst scalefac = 1.2 / Math.max(xrange, yrange);\nconst scalefacz = 0.5 / zrange;\n\n// color scale\nconst getColor = scaleLinear()\n  .domain(extent(values))\n  .interpolate(() => interpolateMagma);\n\nconst Mesh = () => {\n  const [vertices, colors] = useMemo(() => {\n    const vertices = [];\n    const colors = [];\n    for (let i = 0; i < nverts; i++) {\n      vertices.push((xgrid[i] - xmid) * scalefac);\n      vertices.push((ygrid[i] - ymid) * scalefac);\n      vertices.push((values[i] - zmid) * scalefacz);\n      const col = color(getColor(values[i]));\n      colors.push(col.r/255, col.g/255, col.b/255)\n    }\n    return [new Float32Array(vertices), new Float32Array(colors)];\n  }, []);\n\n  const faces = useMemo(() => {\n    const res = [];\n    for (let j = 0; j < M - 1; j++) {\n      for (let i = 0; i < N - 1; i++) {\n        const n0 = j * N + i;\n        const n1 = n0 + 1;\n        const n2 = (j + 1) * N + i + 1;\n        const n3 = n2 - 1;\n        res.push(n0, n1, n2);\n        res.push(n2, n3, n0);\n      }\n    }\n    return new Uint16Array(res);\n  }, []);\n\n  return (\n    <mesh\n      rotation-x={-Math.PI/2}\n    // ref={ref}\n    scale={[4,4,4]}\n    // onPointerOver={() => setHover(true)}\n    // onPointerOut={() => setHover(false)}\n    >\n      <bufferGeometry\n        attach=\"geometry\"\n        onUpdate={(self) => {\n          console.log(self);\n          self.computeFaceNormals();\n          self.computeVertexNormals();\n        }}\n      >\n        <bufferAttribute\n          attachObject={[\"attributes\", \"position\"]}\n          count={vertices.length / 3}\n          array={vertices}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attachObject={[\"attributes\", \"color\"]}\n          count={colors.length / 3}\n          array={colors}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attach=\"index\"\n          count={faces.length}\n          array={faces}\n          itemSize={1}\n        />\n      </bufferGeometry>\n      <meshPhongMaterial attach=\"material\" side={DoubleSide} vertexColors={true}  />\n      <OrbitControls />\n      {/* <Sky /> */}\n    </mesh>\n  );\n};\n\nexport const ThreeTest2 = () => {\n  return (\n    <CanvasContainer text='Surface plot using vertex and faces, colored with d3.'>\n      <Mesh />\n    </CanvasContainer>\n  );\n};\n","import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport { OrbitControls, Sky } from \"drei\";\nimport { color, extent, scaleLinear, interpolateMagma } from \"d3\";\nimport { CanvasContainer } from \"./CanvasContainer\";\n\nconst M = 101,\n  N = 101;\n\nconst getData = (m, n) => {\n  var nverts = n * m;\n  var values = new Array(n * m);\n  var xgrid = new Array(n * m);\n  var ygrid = new Array(n * m);\n  for (var j = 0, k = 0; j < m; ++j) {\n    for (var i = 0; i < n; ++i, ++k) {\n      xgrid[k] = i;\n      ygrid[k] = 25 * Math.sin((i * Math.PI) / 50) + j;\n      values[k] = Math.pow(xgrid[k] - 50, 2) + Math.pow(ygrid[k] - 50, 2);\n    }\n  }\n  return { xgrid, ygrid, values, nverts };\n};\n\nconst { xgrid, ygrid, values, nverts } = getData(M, N);\n\n// Obtain centre of grid and scale factors\nconst [xmin, xmax] = extent(xgrid);\nconst xmid = 0.5 * (xmin + xmax);\nconst xrange = xmax - xmin;\n\nconst [ymin, ymax] = extent(ygrid);\nconst ymid = 0.5 * (ymin + ymax);\nconst yrange = ymax - ymin;\n\nconst [zmin, zmax] = extent(values);\nconst zmid = 0.5 * (zmin + zmax);\nconst zrange = zmax - zmin;\n\nconst scalefac = 1.2 / Math.max(xrange, yrange);\nconst scalefacz = 0.5 / zrange;\n\n// color scale\nconst getColor = scaleLinear()\n  .domain(extent(values))\n  .interpolate(() => interpolateMagma);\n\nconst Mesh = () => {\n  const [vertices, colors] = useMemo(() => {\n    const vertices = [];\n    const colors = [];\n    for (let i = 0; i < nverts; i++) {\n      vertices.push((xgrid[i] - xmid) * scalefac);\n      vertices.push((ygrid[i] - ymid) * scalefac);\n      vertices.push((values[i] - zmid) * scalefacz);\n      const col = color(getColor(values[i]));\n      colors.push(col.r / 255, col.g / 255, col.b / 255);\n    }\n    return [new Float32Array(vertices), new Float32Array(colors)];\n  }, []);\n\n  const faces = useMemo(() => {\n    const res = [];\n    for (let j = 0; j < M - 1; j++) {\n      for (let i = 0; i < N - 1; i++) {\n        const n0 = j * N + i;\n        const n1 = n0 + 1;\n        const n2 = (j + 1) * N + i + 1;\n        const n3 = n2 - 1;\n        res.push(n0, n1, n2);\n        res.push(n2, n3, n0);\n      }\n    }\n    return new Uint16Array(res);\n  }, []);\n\n  const shaderData = useMemo(() => {\n    const vertexShader = `\n  varying float z;\n\n  void main() {\n    vec3 pos = position;\n    z = 0.41 + pos.z*1.5;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n  }\n`;\n\n    const fragmentShader = `\n  varying float z;\n  \n  void main() {\n    gl_FragColor = vec4(z, cos(z*200.0), cos(z*100.0), 1.0);\n  }\n`;\n\n    return { vertexShader, fragmentShader };\n  }, []);\n\n  return (\n    <mesh\n      rotation-x={-Math.PI / 2}\n      // ref={ref}\n      scale={[4, 4, 4]}\n      // onPointerOver={() => setHover(true)}\n      // onPointerOut={() => setHover(false)}\n      // onPointerMove={e => console.log(e.unprojectedPoint)}\n    >\n      <bufferGeometry\n        attach=\"geometry\"\n        onUpdate={(self) => {\n          console.log(self);\n          self.computeFaceNormals();\n          self.computeVertexNormals();\n        }}\n      >\n        <bufferAttribute\n          attachObject={[\"attributes\", \"position\"]}\n          count={vertices.length / 3}\n          array={vertices}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attachObject={[\"attributes\", \"color\"]}\n          count={colors.length / 3}\n          array={colors}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attach=\"index\"\n          count={faces.length}\n          array={faces}\n          itemSize={1}\n        />\n      </bufferGeometry>\n      <shaderMaterial attach=\"material\" {...shaderData} side={DoubleSide}  />\n\n      {/* <meshPhongMaterial\n        attach=\"material\"\n        side={DoubleSide}\n        vertexColors={true}\n      /> */}\n      <OrbitControls />\n      {/* <Sky /> */}\n    </mesh>\n  );\n};\n\nexport const ThreeTest3 = () => {\n  return (\n    <CanvasContainer text='Surface plot using vertex and faces, colored with a custom fragment shader.'>\n      <Mesh />\n    </CanvasContainer>\n  );\n};\n","import React, { useRef, useState, useMemo, useCallback } from \"react\";\nimport { useFrame, Dom } from \"react-three-fiber\";\nimport { OrbitControls } from \"drei\";\nimport styled from \"styled-components\";\nimport { CanvasContainer } from \"./CanvasContainer\";\nimport { Controls, useControl } from 'react-three-gui';\n\nconst Slider = styled.input.attrs((props) => ({\n  type: \"range\",\n}))``;\n\nconst Mesh = () => {\n  const ref = useRef();\n  const boxRef = useRef();\n\n  const shaderData = useMemo(() => {\n    const vertexShader = `\n  attribute float displacement;\n  varying float z;\n\n  void main() {\n    vec3 pos = position;\n    z = pos.z;\n    pos.x += (displacement/1.0);\n    // pos.y += cos(displacement/2.0);\n    // pos.y += fract(displacement/2.0);\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n  }\n`;\n\n    const fragmentShader = `\n  uniform float delta;\n  varying float z;\n  \n  void main() {\n    gl_FragColor = vec4(z*0.5, 0.5 + cos(delta)*0.25, sin(delta), 1.0);\n  }\n`;\n\n    const uniforms = {\n      delta: { value: 0 },\n    };\n\n    return { vertexShader, fragmentShader, uniforms };\n  }, []);\n\n  const [displacement, setDisplacement] = useState();\n\n  const getDisplacement = useCallback(\n    (box) => {\n      if (displacement) return;\n      const n = box.attributes.position.count;\n      const res = new Float32Array(n);\n      setDisplacement(res);\n    },\n    [displacement]\n  );\n\n  // const [colorSpeed, setColorSpeed] = useState(0.01);\n  // const [distortionLvl, setDistortionLvl] = useState(0);\n  const colorSpeed = useControl('Color speed', {type: 'number', value: 0.1, max: 10.0})\n  const distortionLvl = useControl('Distortion lvl', {type: 'number', value: 0.0, max: 1.0})\n\n  useFrame(() => {\n    ref.current.rotation.x = ref.current.rotation.y += 0.01;\n    shaderData.uniforms.delta.value += colorSpeed;\n    for (let i = 0; i < displacement.length; i++) {\n      displacement[i] = Math.random() * distortionLvl;\n    }\n    boxRef.current.attributes.displacement.needsUpdate = true;\n  });\n\n  return (\n    <mesh ref={ref}>\n      <boxBufferGeometry\n        ref={boxRef}\n        attach=\"geometry\"\n        args={[3, 3, 3]}\n        onUpdate={(self) => getDisplacement(self)}\n      >\n        {displacement && (\n          <bufferAttribute\n            attachObject={[\"attributes\", \"displacement\"]}\n            count={displacement.length}\n            array={displacement}\n            itemSize={1}\n          />\n        )}\n      </boxBufferGeometry>\n      <shaderMaterial attach=\"material\" {...shaderData} />\n      <OrbitControls />\n      {/* <Dom\n        style={{ transform: \"\" }}\n        // center\n        // position={[100,0,100]}\n      >\n        <Slider />\n      </Dom> */}\n    </mesh>\n  );\n};\n\nexport const TestShader = () => {\n  return (\n    <CanvasContainer text=\"Testing the use of shaders.\" xtra={<Controls />}>\n      <Mesh />\n    </CanvasContainer>\n  );\n};\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  NavLink,\n  Switch,\n} from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { ThreeTest1 } from \"./ThreeTest1\";\nimport { ThreeTest2 } from \"./ThreeTest2\";\nimport { ThreeTest3 } from \"./ThreeTest3\";\nimport { TestShader } from \"./TestShader\";\nimport \"./App.css\";\n\nconst BASE_URL = 'threejs_playground';\n\nconst NLink = styled(NavLink).attrs((props) => ({\n  exact: true,\n}))`\n  color: #abc;\n  font-size: 1.0rem;\n  &.active {\n    color: #fff;\n  }\n`;\n\nconst NavBar = styled.div`\n  position: absolute;\n  display: flex;\n  flex-wrap: wrap;\n  flex-flow: column;\n  justify-content: space-between;\n  padding-left: 1rem;\n  padding-right: 0rem;\n  padding-top: 3rem;\n  z-index: 100;\n`;\n\nconst Text = styled.div`\n  color: #fff;\n  font-size: 2em;\n  text-align: center;\n  padding-top: 2em;\n`;\n\nconst App = () => {\n  return (\n    <Router>\n      <NavBar>\n        <div>\n          <NLink to={`/${BASE_URL}/`}>Home</NLink>\n        </div>\n        <div>\n          <NLink to={`/${BASE_URL}/ThreeTest1`}>ThreeTest1</NLink>\n        </div>\n        <div>\n          <NLink to={`/${BASE_URL}/ThreeTest2`}>ThreeTest2</NLink>\n        </div>\n        <div>\n          <NLink to={`/${BASE_URL}/ThreeTest3`}>ThreeTest3</NLink>\n        </div>\n        <div>\n          <NLink to={`/${BASE_URL}/TestShader`}>TestShader</NLink>\n        </div>\n      </NavBar>\n      <Switch>\n        <Route exact path={`/${BASE_URL}/`}>\n          <Text>Some threejs tests</Text>\n        </Route>\n        <Route path={`/${BASE_URL}/ThreeTest1`}>\n          <ThreeTest1 />\n        </Route>\n        <Route path={`/${BASE_URL}/ThreeTest2`}>\n          <ThreeTest2 />\n        </Route>\n        <Route path={`/${BASE_URL}/ThreeTest3`}>\n          <ThreeTest3 />\n        </Route>\n        <Route path={`/${BASE_URL}/TestShader`}>\n          <TestShader />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}